# This is a basic workflow to help you get started with Actions

name: Build (Mobile)


# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ main, experimental, psych-update, mobile-build-wip ]
  pull_request:
    branches: [ main, experimental, psych-update, mobile-build-wip ]

  workflow_call:
    inputs:
      buildFlags:
        required: false
        type: string

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  buildAndroid:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - name: Setup Android NDK
        uses: nttld/setup-ndk@main
        id: setup-ndk
        with:
          ndk-version: r21e

      - name: Setup Java JDK
        uses: actions/setup-java@main
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup Haxe
        uses: krdlab/setup-haxe@master
        with:
          haxe-version: 4.3.3
          
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          sudo apt-get install libvlc-dev
          sudo apt-get install libvlccore-dev
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxe -cp ./setup -D analyzer-optimize -main Main --interp

          haxelib install extension-androidtools
      - name: Skip SScript setup mode
        run: echo 'oy9:showMacroty8:loopCosti25y10:includeAllfg' >> ~/settings.cocoa
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Configure Android
        run: |
          haxelib run lime config ANDROID_SDK $ANDROID_HOME
          haxelib run lime config ANDROID_NDK_ROOT $ANDROID_NDK_HOME
          haxelib run lime config JAVA_HOME $JAVA_HOME
          haxelib run lime config ANDROID_SETUP true
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
      - name: Compile
        run: haxelib run lime build android -arm64 -final --app-version="4.0.0-${{ github.run_id}}" -D ${{ inputs.buildFlags }}
        env:
          cert_pass: nullfunni
          cert_alias_pass: nullfunni
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: androidBuild
          path: 'export/release/android/bin/app/build/outputs/apk/release/*.apk'
          if-no-files-found: error
  buildiOS:
    runs-on: macos-13

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@main

      - uses: krdlab/setup-haxe@master
        with:
          haxe-version: latest
      # Runs a set of commands using the runners shell
      - name: Install Haxelib
        run: |
          haxelib setup ~/haxelib
          haxelib install hxcpp > /dev/null --quiet
          haxe -cp ./setup -D analyzer-optimize -main Main --interp
      - name: Skip SScript setup mode
        run: echo 'oy9:showMacroty8:loopCosti25y10:includeAllfg' >> ~/settings.cocoa
      - name: Create Version Tag
        run: echo "${{github.run_id}}" > VERSION
      - name: Compile
        run: haxelib run lime build ios --app-version="4.0.0-${{ github.run_id}}" -D ${{ inputs.buildFlags }}
      - name: Create IPA
        run: |
          cd export/release/ios/build/Release-iphoneos
          mkdir apps
          mv *.app apps
          zip -r FNF-QuackEngine.ipa apps
      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: iOSBuild
          path: export/release/ios/build/Release-iphoneos/FNF-QuackEngine.ipa
